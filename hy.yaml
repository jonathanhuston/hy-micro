filetype: hy

detect:
    filename: "\\.hy$"

rules:

      # Valid numbers
    - constant.number: "[\\-]?[0-9]+?\\b"
    - constant.number: "0x[0-9][A-Fa-f]+?\\b"
    - constant.number: "[\\-]?(3[0-6]|2[0-9]|1[0-9]|[2-9])r[0-9A-Z]+?\\b"
    - constant.number: "\\b[0-9](_?[0-9])*(\\.([0-9](_?[0-9])*)?)?(e[0-9](_?[0-9])*)?\\b" # decimal
    - constant.number: "\\b0b(_?[01])+\\b"     # bin
    - constant.number: "\\b0o(_?[0-7])+\\b"    # oct
    - constant.number: "\\b0x(_?[0-9a-f])+\\b" # hex
      # Invalid numbers
    - error: "[\\-]?([4-9][0-9]|3[7-9]|1|0)r[0-9A-Z]+?\\b"

      # String highlighting
    - constant.string:
        start: "\""
        end: "\""
        skip: "\\\\."
        rules:
            - constant.specialChar: "(\\\\u[0-9A-fa-f]{4,4}|\\\\newline|\\\\space|\\\\tab|\\\\formfeed|\\\\backspace|\\\\return|\\\\.)"

    # definitions
    - identifier.var: "def [a-zA-Z\\-_0-9~]+"
    - identifier.var: "setv [a-zA-Z\\-_0-9~]+"
    - identifier.var: "setx [a-zA-Z\\-_0-9~]+"
    - identifier.var: "global [a-zA-Z\\-_0-9~]+"
    - identifier.var: "nonlocal [a-zA-Z\\-_0-9~]+"
    - identifier.var: "defn [a-zA-Z\\-_0-9]+"
    - identifier.var: "defclass [a-zA-Z\\-_0-9]+"
    - identifier.var: "defmacro [a-zA-Z\\-_0-9]+"
    - identifier.var: "let \\[[a-zA-Z\\-_0-9]+"
    - identifier.var: "for \\[[a-zA-Z\\-_0-9]+"
    - identifier.var: "lfor [a-zA-Z\\-_0-9]+"
    - identifier.var: "sfor [a-zA-Z\\-_0-9]+"
    - identifier.var: "cfor [a-zA-Z\\-_0-9]+"
    - identifier.var: "dfor [a-zA-Z\\-_0-9]+"
    - identifier.var: "gfor [a-zA-Z\\-_0-9]+"
    - identifier.var: ":[a-zA-Z\\-_0-9]+"
    - identifier.var: "with-decorator [a-zA-Z\\-_0-9]+"

    # built-in objects
    - constant: "\\b(Ellipsis|None|True|False)\\b"
      # built-in attributes
    - constant: "\\b(__bases__|__builtin__|__class__|__debug__|__dict__|__doc__|__file__|__members__|__methods__|__name__|__self__)\\b"
      # built-in functions
    - identifier: "\\b(abs|accumulate|all|and|any|ascii|append|bin|bool|breakpoint|butlast|bytearray|bytes|callable|chain|chr|classmethod|combinations|comp|compile|complement|complex|compress|constantly|count|cut|cycle|dec|delattr|dir|disassemble|distinct|divmod|drop|eval|exec|filter|first|flatten|format|fraction|get|getattr|globals|hasattr|hash|help|hex|hy.eval|id|identity|in|inc|input|interleave|interpose|is|isinstance|islice|issubclass|iter|iterate|juxt|keyword|last|len|locals|mangle|map|max|min|multicombinations|next|nonlocal|not|nth|oct|of|open|or|ord|partition|permutations|pow|print|product|py|pys|range|read|reduce|remove|repeat|repeatedly|repr|rest|round|second|setattr|some|sorted|tee|sum|take|type|unmangle|vars|xor|zip|__import__)\\b"
      # special method names
    - identifier: "\\b__(abs|add|and|call|cmp|coerce|complex|concat|contains|delattr|delitem|delslice|del|dict|divmod|div|first|float|getattr|getitem|getslice|hash|hex|iadd|iand|iconcat|ifloordiv|ilshift|imatmul|imod|imul|init|int|invert|inv|ior|ipow|irshift|isub|iter|itruediv|ixor|len|long|lshift|mod|mul|neg|next|nonzero|oct|or|pos|pow|radd|rand|rcmp|rdivmod|rdiv|repeat|repr|rlshift|rmod|rmul|ror|rpow|rrshift|rshift|rsub|rxor|setattr|setitem|setslice|str|sub|xor)__\\b"
      # types
    - type: "\\b(bool|bytearray|bytes|classmethod|complex|dict|enumerate|float|frozenset|int|list|memoryview|object|property|reversed|set|slice|staticmethod|str|super|tuple)\\b"
      # keywords
    - statement: "\\b(as|assert|async|await|break|case|cfor|class|cmp|continue|cond|def|defclass|defn|defmacro|deftag|del|dfor|do|else|except|finally|fn|for|gensym|gfor|global|if|import|let|lfor|loop|macroexpand|nonlocal|pass|quasiquote|quote|raise|recur|require|return|setv|setx|sfor|try|unless|unquote|when|while|with|yield)\\b"
      # decorators
    - brightgreen: "\\bwith-decorator"
      # operators
    - symbol.operator: "([#^.,|!]|&)"
    - identifier: "\\^ "
    - identifier: "coll\\?"
    - identifier: "drop-last"
    - identifier: "drop-while"
    - identifier: "empty\\?"
    - identifier: "even\\?"
    - identifier: "every\\?"
    - identifier: "float\\?"
    - identifier: "group-by"
    - identifier: "instance\\?"
    - identifier: "integer-char\\?"
    - identifier: "integer\\?"
    - identifier: "iterable\\?"
    - identifier: "iterator\\?"
    - identifier: "keyword\\?"
    - identifier: "list\\?"
    - identifier: "merge-with"
    - identifier: "neg\\?"
    - identifier: "none\\?"
    - identifier: "not\\?"
    - identifier: "not-in"
    - identifier: "numeric\\?"
    - identifier: "odd\\?"
    - identifier: "parse-args"
    - identifier: "pos\\?"
    - identifier: "read-str"
    - identifier: "string\\?"
    - identifier: "symbol\\?"
    - identifier: "take-nth"
    - identifier: "take-while"
    - identifier: "tuple\\?"
    - identifier: "zero\\?"
    - identifier: "zip-longest"

      # parentheses
    - symbol.brackets: "([(){}]|\\[|\\])"

    - identifier: "\\= |!\\= |\\+ |- |\\* |\\*\\* |/ |// |% |@ |< |> |<\\= |\\=> |<< |>> |\\| |\\~ |\\*map"
    - statement: "\\b(calling-module|calling-module-name|defn\\/a|eval-and-compile|eval-when-compile|fn\\/a|if-not|macroexpand-1|unpack-iterable|unpack-mapping|unquote-splice|with\\/a|yield-from)\\b"
    - statement: ":as"
    - statement: ":async"
    - statement: ":do"
    - statement: ":if"
    - statement: ":setv"

    - statement: ":action"
    - statement: ":description"
    - statement: ":help"
    - statement: ":nargs"
    - statement: ":type"

    - symbol.operator: "#\\*+"
    - symbol.operator: "->"
    - symbol.operator: "->>"

      # Comments
    - comment:
        start: ";"
        end: "$"
        rules:
            - todo: "(TODO|XXX|FIXME):?"
    - comment: "\\bcomment"
    - comment: "#_"
